// Copyright Â© 2015 Kevin Robert Stravers
/*
This file is part of Unnamed-Language Compiler Reference Implementation (ULCRI).

ULCRI is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ULCRI is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ULCRI.  If not, see <http://www.gnu.org/licenses/>.
*/
add(ACCESS_SPECIFIER, KEYWORD_PRIVATE) {cT(KEYWORD_PRIVATE)});
add(ACCESS_SPECIFIER, KEYWORD_PUBLIC) {cT(KEYWORD_PUBLIC)});
add(ACCESS_SPECIFIER, KEYWORD_RESTRICTED) {cT(KEYWORD_RESTRICTED)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, INTEGER_LITERAL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, STRING) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, STRING) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(ARGUMENT, IDENTIFIER_CLASS) {cT(DATA_DECLARATION), cT(COMMA_ARGUMENT_LIST)});
add(ARGUMENT, PRIMITIVE_SIGNED) {cT(DATA_DECLARATION), cT(COMMA_ARGUMENT_LIST)});
add(ARGUMENT, PRIMITIVE_UNSIGNED) {cT(DATA_DECLARATION), cT(COMMA_ARGUMENT_LIST)});
add(ARGUMENT_LIST, IDENTIFIER_CLASS) {cT(ARGUMENT)});
add(ARGUMENT_LIST, PRIMITIVE_SIGNED) {cT(ARGUMENT)});
add(ARGUMENT_LIST, PRIMITIVE_UNSIGNED) {cT(ARGUMENT)});
eps(ARGUMENT_LIST);
add(ASSIGNMENT, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE), cT(SYMBOL_EQUAL), cT(EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_VARIABLE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, INTEGER_LITERAL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, STRING) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, STRING) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, STRING) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(COMMA_ARGUMENT_LIST, SYMBOL_COMMA) {cT(SYMBOL_COMMA), cT(ARGUMENT_LIST)});
add(DATA_DECLARATION, IDENTIFIER_CLASS) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(DATA_DECLARATION, PRIMITIVE_SIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(DATA_DECLARATION, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(DECL_OR_FUNC, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(DECL_OR_FUNC, IDENTIFIER_CLASS) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, PRIMITIVE_SIGNED) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, PRIMITIVE_UNSIGNED) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(ENTER, KEYWORD_PRIVATE) {cT(ACCESS_SPECIFIER), cT(DECL_OR_FUNC)});
add(ENTER, KEYWORD_PUBLIC) {cT(ACCESS_SPECIFIER), cT(DECL_OR_FUNC)});
add(ENTER, KEYWORD_RESTRICTED) {cT(ACCESS_SPECIFIER), cT(DECL_OR_FUNC)});
eps(ENTER);
add(EQUALITY_EXPRESSION, IDENTIFIER_VARIABLE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, INTEGER_LITERAL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, STRING) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(OR_EXPRESSION)});
add(EXPRESSION, IDENTIFIER_VARIABLE) {cT(OR_EXPRESSION)});
add(EXPRESSION, INTEGER_LITERAL) {cT(OR_EXPRESSION)});
add(EXPRESSION, STRING) {cT(OR_EXPRESSION)});
add(FUNCTION_DEFINITION, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE), cT(IDENTIFIER_SUBROUTINE), cT(GROUPER_LEFT_BRACE), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_BRACE)});
add(FUNCTION_LIST, KEYWORD_PRIVATE) {cT(ACCESS_SPECIFIER), cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(FUNCTION_LIST, KEYWORD_PUBLIC) {cT(ACCESS_SPECIFIER), cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(FUNCTION_LIST, KEYWORD_RESTRICTED) {cT(ACCESS_SPECIFIER), cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(FUNCTION_SIGNATURE, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(ARGUMENT_LIST), cT(SYMBOL_COLON), cT(ARGUMENT_LIST), cT(GROUPER_RIGHT_PARENTHESIS)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(RESOURCE), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, INTEGER_LITERAL) {cT(RESOURCE), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, STRING) {cT(RESOURCE), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(OPTIONAL_ADDITIVE_EXPRESSION, SYMBOL_MINUS) {cT(SYMBOL_MINUS), cT(ADDITIVE_EXPRESSION)});
add(OPTIONAL_ADDITIVE_EXPRESSION, SYMBOL_PLUS) {cT(SYMBOL_PLUS), cT(ADDITIVE_EXPRESSION)});
eps(OPTIONAL_ADDITIVE_EXPRESSION);
add(OPTIONAL_AND_EXPRESSION, SYMBOL_AMPERSAND__AMPERSAND) {cT(SYMBOL_AMPERSAND__AMPERSAND), cT(AND_EXPRESSION)});
eps(OPTIONAL_AND_EXPRESSION);
add(OPTIONAL_ASSIGNMENT, SYMBOL_EQUAL) {cT(SYMBOL_EQUAL), cT(EXPRESSION)});
eps(OPTIONAL_ASSIGNMENT);
add(OPTIONAL_BITWISE_AND_EXPRESSION, SYMBOL_AMPERSAND) {cT(SYMBOL_AMPERSAND), cT(BITWISE_AND_EXPRESSION)});
eps(OPTIONAL_BITWISE_AND_EXPRESSION);
add(OPTIONAL_BITWISE_OR_EXPRESSION, SYMBOL_BAR) {cT(SYMBOL_BAR), cT(BITWISE_OR_EXPRESSION)});
eps(OPTIONAL_BITWISE_OR_EXPRESSION);
add(OPTIONAL_BITWISE_XOR_EXPRESSION, SYMBOL_CARET) {cT(SYMBOL_CARET), cT(BITWISE_XOR_EXPRESSION)});
eps(OPTIONAL_BITWISE_XOR_EXPRESSION);
add(OPTIONAL_EQUALITY_EXPRESSION, SYMBOL_EQUAL__EQUAL) {cT(SYMBOL_EQUAL__EQUAL), cT(EQUALITY_EXPRESSION)});
eps(OPTIONAL_EQUALITY_EXPRESSION);
add(OPTIONAL_MULTIPLICATIVE_EXPRESSION, SYMBOL_FORWARD_SLASH) {cT(SYMBOL_FORWARD_SLASH), cT(IDENTIFIER_VARIABLE)});
add(OPTIONAL_MULTIPLICATIVE_EXPRESSION, SYMBOL_STAR) {cT(SYMBOL_STAR), cT(IDENTIFIER_VARIABLE)});
eps(OPTIONAL_MULTIPLICATIVE_EXPRESSION);
add(OPTIONAL_OR_EXPRESSION, SYMBOL_BAR__BAR) {cT(SYMBOL_BAR__BAR), cT(OR_EXPRESSION)});
eps(OPTIONAL_OR_EXPRESSION);
add(OPTIONAL_RELATIONAL_EXPRESSION, RELATIONAL_OPERATOR) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
eps(OPTIONAL_RELATIONAL_EXPRESSION);
add(OR_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, INTEGER_LITERAL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, STRING) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_VARIABLE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, INTEGER_LITERAL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, STRING) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RESOURCE, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE)});
add(RESOURCE, INTEGER_LITERAL) {cT(INTEGER_LITERAL)});
add(RESOURCE, STRING) {cT(STRING)});
add(STATEMENT, IDENTIFIER_VARIABLE) {cT(ASSIGNMENT)});
add(STATEMENT_LIST, IDENTIFIER_VARIABLE) {cT(STATEMENT), cT(STATEMENT_LIST)});
eps(STATEMENT_LIST);
add(TYPE, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS)});
add(TYPE, PRIMITIVE_SIGNED) {cT(PRIMITIVE_SIGNED)});
add(TYPE, PRIMITIVE_UNSIGNED) {cT(PRIMITIVE_UNSIGNED)});