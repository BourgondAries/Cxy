// Copyright Â© 2015 Kevin Robert Stravers
/*
This file is part of Unnamed-Language Compiler Reference Implementation (ULCRI).

ULCRI is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ULCRI is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ULCRI.  If not, see <http://www.gnu.org/licenses/>.
*/
add(ACCESS_SPECIFIER, KEYWORD_PRIVATE) {cT(KEYWORD_PRIVATE)});
add(ACCESS_SPECIFIER, KEYWORD_PUBLIC) {cT(KEYWORD_PUBLIC)});
add(ACCESS_SPECIFIER, KEYWORD_RESTRICTED) {cT(KEYWORD_RESTRICTED)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_CLASS) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_PACKAGE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, INTEGER_LITERAL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, STRING) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_APETAIL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_DOLLAR) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_MINUS) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_CLASS) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_PACKAGE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, STRING) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_APETAIL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_DOLLAR) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_MINUS) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(ARGUMENT, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, IDENTIFIER_CLASS) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_CONST) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_PTR) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_REF) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, PRIMITIVE_SIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT_LIST, GROUPER_LEFT_BRACKET) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, IDENTIFIER_CLASS) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_CONST) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_PTR) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_REF) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, PRIMITIVE_SIGNED) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, PRIMITIVE_UNSIGNED) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
eps(ARGUMENT_LIST);
add(ARGUMENT_LIST_AFTER_FIRST, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, IDENTIFIER_CLASS) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_CONST) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_PTR) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_REF) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, PRIMITIVE_SIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ASSIGNMENT, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE), cT(SYMBOL_EQUAL), cT(EXPRESSION)});
add(ATTRIBUTE_LIST, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(ATTRIBUTE_LIST_AFTER_CONST)});
add(ATTRIBUTE_LIST, KEYWORD_PURE) {cT(KEYWORD_PURE)});
add(ATTRIBUTE_LIST_AFTER_CONST, KEYWORD_PURE) {cT(KEYWORD_PURE)});
eps(ATTRIBUTE_LIST_AFTER_CONST);
add(BASIC_TYPE, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS)});
add(BASIC_TYPE, PRIMITIVE_SIGNED) {cT(PRIMITIVE_SIGNED)});
add(BASIC_TYPE, PRIMITIVE_UNSIGNED) {cT(PRIMITIVE_UNSIGNED)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_CLASS) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_PACKAGE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_VARIABLE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, INTEGER_LITERAL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, STRING) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_APETAIL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_DOLLAR) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_MINUS) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_CLASS) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_PACKAGE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, STRING) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_APETAIL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_DOLLAR) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_MINUS) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_CLASS) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_PACKAGE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, STRING) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_APETAIL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_DOLLAR) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_MINUS) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(CALL, IDENTIFIER_SUBROUTINE) {cT(IDENTIFIER_SUBROUTINE), cT(GROUPER_LEFT_PARENTHESIS), cT(GROUPER_RIGHT_PARENTHESIS)});
add(CODE_BLOCK, GROUPER_LEFT_BRACE) {cT(GROUPER_LEFT_BRACE), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_BRACE)});
add(DATA_DECLARATION, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DATA_DECLARATION, IDENTIFIER_CLASS) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DATA_DECLARATION, KEYWORD_CONST) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DATA_DECLARATION, KEYWORD_PTR) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DATA_DECLARATION, KEYWORD_REF) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DATA_DECLARATION, PRIMITIVE_SIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DATA_DECLARATION, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
add(DECL_OR_FUNC, GROUPER_LEFT_BRACKET) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(DECL_OR_FUNC, IDENTIFIER_CLASS) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, KEYWORD_CONST) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, KEYWORD_PTR) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, KEYWORD_REF) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, PRIMITIVE_SIGNED) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DECL_OR_FUNC, PRIMITIVE_UNSIGNED) {cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(ENTER)});
add(DO_STATEMENT, KEYWORD_DO) {cT(KEYWORD_DO), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(CODE_BLOCK)});
add(ENTER, KEYWORD_PRIVATE) {cT(ACCESS_SPECIFIER), cT(DECL_OR_FUNC)});
add(ENTER, KEYWORD_PUBLIC) {cT(ACCESS_SPECIFIER), cT(DECL_OR_FUNC)});
add(ENTER, KEYWORD_RESTRICTED) {cT(ACCESS_SPECIFIER), cT(DECL_OR_FUNC)});
eps(ENTER);
add(EQUALITY_EXPRESSION, IDENTIFIER_CLASS) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_PACKAGE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_VARIABLE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, INTEGER_LITERAL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, STRING) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_APETAIL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_DOLLAR) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_MINUS) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(OR_EXPRESSION)});
add(EXPRESSION, IDENTIFIER_CLASS) {cT(OR_EXPRESSION)});
add(EXPRESSION, IDENTIFIER_PACKAGE) {cT(OR_EXPRESSION)});
add(EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(OR_EXPRESSION)});
add(EXPRESSION, IDENTIFIER_VARIABLE) {cT(OR_EXPRESSION)});
add(EXPRESSION, INTEGER_LITERAL) {cT(OR_EXPRESSION)});
add(EXPRESSION, STRING) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_APETAIL) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_DOLLAR) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(OR_EXPRESSION)});
add(EXPRESSION, SYMBOL_MINUS) {cT(OR_EXPRESSION)});
add(FOR_STATEMENT, KEYWORD_FOR) {cT(KEYWORD_FOR), cT(GROUPER_LEFT_PARENTHESIS), cT(DATA_DECLARATION), cT(SYMBOL_SEMICOLON), cT(EXPRESSION), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_PARENTHESIS), cT(CODE_BLOCK)});
add(FUNCTION_DEFINITION, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE), cT(IDENTIFIER_SUBROUTINE), cT(GROUPER_LEFT_BRACE), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_BRACE)});
add(FUNCTION_LIST, KEYWORD_PRIVATE) {cT(ACCESS_SPECIFIER), cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(FUNCTION_LIST, KEYWORD_PUBLIC) {cT(ACCESS_SPECIFIER), cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
add(FUNCTION_LIST, KEYWORD_RESTRICTED) {cT(ACCESS_SPECIFIER), cT(FUNCTION_DEFINITION), cT(FUNCTION_LIST)});
eps(FUNCTION_LIST);
add(FUNCTION_SIGNATURE, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(ARGUMENT_LIST), cT(SYMBOL_COLON), cT(ARGUMENT_LIST), cT(OPTIONAL_ATTRIBUTE_LIST), cT(GROUPER_RIGHT_PARENTHESIS)});
add(GOTO_STATEMENT, KEYWORD_GOTO) {cT(KEYWORD_GOTO), cT(IDENTIFIER_VARIABLE)});
add(IF_STATEMENT, KEYWORD_IF) {cT(KEYWORD_IF), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(CODE_BLOCK)});
add(ITER_STATEMENT, SYMBOL_MINUS__MINUS) {cT(SYMBOL_MINUS__MINUS), cT(EXPRESSION)});
add(ITER_STATEMENT, SYMBOL_PLUS__PLUS) {cT(SYMBOL_PLUS__PLUS), cT(EXPRESSION)});
add(LABEL_STATEMENT, KEYWORD_LABEL) {cT(KEYWORD_LABEL), cT(IDENTIFIER_VARIABLE)});
add(MEMBER_EXPRESSION, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS), cT(SYMBOL_DOT), cT(MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE), cT(SYMBOL_DOT), cT(MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(IDENTIFIER_SUBROUTINE), cT(GROUPER_LEFT_PARENTHESIS), cT(GROUPER_RIGHT_PARENTHESIS)});
add(MEMBER_EXPRESSION, IDENTIFIER_VARIABLE) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, INTEGER_LITERAL) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, STRING) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_CLASS) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_PACKAGE) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, INTEGER_LITERAL) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, STRING) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_APETAIL) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_DOLLAR) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_MINUS) {cT(UNARY_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_DO) {cT(DO_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_FOR) {cT(FOR_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_GOTO) {cT(GOTO_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_IF) {cT(IF_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_LABEL) {cT(LABEL_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_WHILE) {cT(WHILE_STATEMENT)});
add(OPTIONAL_ADDITIVE_EXPRESSION, SYMBOL_MINUS) {cT(SYMBOL_MINUS), cT(ADDITIVE_EXPRESSION)});
add(OPTIONAL_ADDITIVE_EXPRESSION, SYMBOL_PLUS) {cT(SYMBOL_PLUS), cT(ADDITIVE_EXPRESSION)});
eps(OPTIONAL_ADDITIVE_EXPRESSION);
add(OPTIONAL_AND_EXPRESSION, SYMBOL_AMPERSAND__AMPERSAND) {cT(SYMBOL_AMPERSAND__AMPERSAND), cT(AND_EXPRESSION)});
eps(OPTIONAL_AND_EXPRESSION);
add(OPTIONAL_ARGUMENT_LIST, SYMBOL_COMMA) {cT(SYMBOL_COMMA), cT(ARGUMENT_LIST_AFTER_FIRST)});
eps(OPTIONAL_ARGUMENT_LIST);
add(OPTIONAL_ASSIGNMENT, SYMBOL_EQUAL) {cT(SYMBOL_EQUAL), cT(EXPRESSION)});
eps(OPTIONAL_ASSIGNMENT);
add(OPTIONAL_ATTRIBUTE_LIST, SYMBOL_COLON) {cT(SYMBOL_COLON), cT(ATTRIBUTE_LIST)});
eps(OPTIONAL_ATTRIBUTE_LIST);
add(OPTIONAL_BITWISE_AND_EXPRESSION, SYMBOL_AMPERSAND) {cT(SYMBOL_AMPERSAND), cT(BITWISE_AND_EXPRESSION)});
eps(OPTIONAL_BITWISE_AND_EXPRESSION);
add(OPTIONAL_BITWISE_OR_EXPRESSION, SYMBOL_BAR) {cT(SYMBOL_BAR), cT(BITWISE_OR_EXPRESSION)});
eps(OPTIONAL_BITWISE_OR_EXPRESSION);
add(OPTIONAL_BITWISE_XOR_EXPRESSION, SYMBOL_CARET) {cT(SYMBOL_CARET), cT(BITWISE_XOR_EXPRESSION)});
eps(OPTIONAL_BITWISE_XOR_EXPRESSION);
add(OPTIONAL_DATA_DECLARATION, SYMBOL_COMMA) {cT(SYMBOL_COMMA), cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
eps(OPTIONAL_DATA_DECLARATION);
add(OPTIONAL_EQUALITY_EXPRESSION, SYMBOL_EQUAL__EQUAL) {cT(SYMBOL_EQUAL__EQUAL), cT(EQUALITY_EXPRESSION)});
eps(OPTIONAL_EQUALITY_EXPRESSION);
add(OPTIONAL_MEMBER_EXPRESSION, SYMBOL_DOT) {cT(SYMBOL_DOT), cT(MEMBER_EXPRESSION)});
eps(OPTIONAL_MEMBER_EXPRESSION);
add(OPTIONAL_MULTIPLICATIVE_EXPRESSION, SYMBOL_FORWARD_SLASH) {cT(SYMBOL_FORWARD_SLASH), cT(MULTIPLICATIVE_EXPRESSION)});
add(OPTIONAL_MULTIPLICATIVE_EXPRESSION, SYMBOL_STAR) {cT(SYMBOL_STAR), cT(MULTIPLICATIVE_EXPRESSION)});
eps(OPTIONAL_MULTIPLICATIVE_EXPRESSION);
add(OPTIONAL_OR_EXPRESSION, SYMBOL_BAR__BAR) {cT(SYMBOL_BAR__BAR), cT(OR_EXPRESSION)});
eps(OPTIONAL_OR_EXPRESSION);
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_GREATER_THAN) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_GREATER_THAN__EQUAL) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_LESS_THAN) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_LESS_THAN__EQUAL) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
eps(OPTIONAL_RELATIONAL_EXPRESSION);
add(OR_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(OR_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS)});
add(OR_EXPRESSION, IDENTIFIER_CLASS) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_PACKAGE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, INTEGER_LITERAL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, STRING) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_APETAIL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_DOLLAR) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_MINUS) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_CLASS) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_PACKAGE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_VARIABLE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, INTEGER_LITERAL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, STRING) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_APETAIL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_DOLLAR) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_MINUS) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_OPERATOR, SYMBOL_GREATER_THAN) {cT(SYMBOL_GREATER_THAN)});
add(RELATIONAL_OPERATOR, SYMBOL_GREATER_THAN__EQUAL) {cT(SYMBOL_GREATER_THAN__EQUAL)});
add(RELATIONAL_OPERATOR, SYMBOL_LESS_THAN) {cT(SYMBOL_LESS_THAN)});
add(RELATIONAL_OPERATOR, SYMBOL_LESS_THAN__EQUAL) {cT(SYMBOL_LESS_THAN__EQUAL)});
add(RESOURCE, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE)});
add(RESOURCE, INTEGER_LITERAL) {cT(INTEGER_LITERAL)});
add(RESOURCE, STRING) {cT(STRING)});
add(STATEMENT, GROUPER_LEFT_BRACKET) {cT(DATA_DECLARATION)});
add(STATEMENT, IDENTIFIER_CLASS) {cT(DATA_DECLARATION)});
add(STATEMENT, IDENTIFIER_SUBROUTINE) {cT(CALL)});
add(STATEMENT, IDENTIFIER_VARIABLE) {cT(ASSIGNMENT)});
add(STATEMENT, KEYWORD_CONST) {cT(DATA_DECLARATION)});
add(STATEMENT, KEYWORD_PTR) {cT(DATA_DECLARATION)});
add(STATEMENT, KEYWORD_REF) {cT(DATA_DECLARATION)});
add(STATEMENT, PRIMITIVE_SIGNED) {cT(DATA_DECLARATION)});
add(STATEMENT, PRIMITIVE_UNSIGNED) {cT(DATA_DECLARATION)});
add(STATEMENT, SYMBOL_MINUS__MINUS) {cT(ITER_STATEMENT)});
add(STATEMENT, SYMBOL_PLUS__PLUS) {cT(ITER_STATEMENT)});
add(STATEMENT_LIST, GROUPER_LEFT_BRACKET) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_CLASS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_SUBROUTINE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_VARIABLE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_CONST) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_DO) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_FOR) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_GOTO) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_IF) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_LABEL) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_PTR) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_REF) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_WHILE) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, PRIMITIVE_SIGNED) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, PRIMITIVE_UNSIGNED) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_MINUS__MINUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_PLUS__PLUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON), cT(STATEMENT_LIST)});
eps(STATEMENT_LIST);
add(TYPE, GROUPER_LEFT_BRACKET) {cT(GROUPER_LEFT_BRACKET), cT(INTEGER_LITERAL), cT(SYMBOL_COMMA), cT(TYPE), cT(GROUPER_RIGHT_BRACKET)});
add(TYPE, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(TYPE_AFTER_CONST)});
add(TYPE, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE, KEYWORD_REF) {cT(KEYWORD_REF), cT(TYPE_AFTER_REF)});
add(TYPE, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE_AFTER_CONST, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(TYPE_AFTER_REF_CONST)});
add(TYPE_AFTER_REF, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE_AFTER_REF, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(TYPE_AFTER_REF_CONST)});
add(TYPE_AFTER_REF_CONST, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE_AFTER_REF_CONST, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(UNARY_EXPRESSION, IDENTIFIER_CLASS) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_PACKAGE) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_VARIABLE) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, INTEGER_LITERAL) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, STRING) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_APETAIL) {cT(SYMBOL_APETAIL), cT(EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(SYMBOL_APETAIL__APETAIL), cT(EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_DOLLAR) {cT(SYMBOL_DOLLAR), cT(EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(SYMBOL_DOLLAR__DOLLAR), cT(EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(SYMBOL_EXCLAMATION_MARK), cT(EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK), cT(EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_MINUS) {cT(SYMBOL_MINUS), cT(EXPRESSION)});
add(WHILE_STATEMENT, KEYWORD_WHILE) {cT(KEYWORD_WHILE), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(CODE_BLOCK)});