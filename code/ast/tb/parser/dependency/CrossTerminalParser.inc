// Copyright Â© 2015 Kevin Robert Stravers
/*
This file is part of Cxy Compiler Reference Implementation (Cxy CRI).

Cxy CRI is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Cxy CRI is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Cxy CRI.  If not, see <http://www.gnu.org/licenses/>.
*/
add(ACCESS_SPECIFIER, KEYWORD_PRIVATE) {cT(KEYWORD_PRIVATE)});
add(ACCESS_SPECIFIER, KEYWORD_PUBLIC) {cT(KEYWORD_PUBLIC)});
add(ACCESS_SPECIFIER, KEYWORD_RESTRICTED) {cT(KEYWORD_RESTRICTED)});
eps(ACCESS_SPECIFIER);
add(ADDITIVE_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_CLASS) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_PACKAGE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, INTEGER_LITERAL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, KEYWORD_CAST) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, KEYWORD_DELETE) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, KEYWORD_LAMBDA) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, KEYWORD_NEW) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, KEYWORD_WHEN) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, STRING) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_APETAIL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_DOLLAR) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ADDITIVE_EXPRESSION, SYMBOL_MINUS) {cT(MULTIPLICATIVE_EXPRESSION), cT(OPTIONAL_ADDITIVE_EXPRESSION)});
add(ALIAS_STATEMENT, KEYWORD_ALIAS) {cT(KEYWORD_ALIAS), cT(ALIAS_TRAIL)});
add(ALIAS_TRAIL, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS), cT(SYMBOL_EQUAL), cT(TYPE)});
add(ALIAS_TRAIL, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE), cT(SYMBOL_EQUAL), cT(IDENTIFIER_PACKAGE)});
add(AND_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_CLASS) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_PACKAGE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, KEYWORD_CAST) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, KEYWORD_DELETE) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, KEYWORD_LAMBDA) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, KEYWORD_NEW) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, KEYWORD_WHEN) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, STRING) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_APETAIL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_DOLLAR) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(AND_EXPRESSION, SYMBOL_MINUS) {cT(BITWISE_OR_EXPRESSION), cT(OPTIONAL_AND_EXPRESSION)});
add(ARGUMENT, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, GROUPER_LEFT_PARENTHESIS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, IDENTIFIER_CLASS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, IDENTIFIER_PACKAGE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_CONST) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_DOUBLE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_FLOAT) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_PTR) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_REF) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, KEYWORD_TYPE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, PRIMITIVE_SIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT)});
add(ARGUMENT_LIST, GROUPER_LEFT_BRACKET) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, GROUPER_LEFT_PARENTHESIS) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, IDENTIFIER_CLASS) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, IDENTIFIER_PACKAGE) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_CONST) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_DOUBLE) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_FLOAT) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_PTR) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_REF) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, KEYWORD_TYPE) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, PRIMITIVE_SIGNED) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST, PRIMITIVE_UNSIGNED) {cT(ARGUMENT), cT(OPTIONAL_ARGUMENT_LIST)});
eps(ARGUMENT_LIST);
add(ARGUMENT_LIST_AFTER_FIRST, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, GROUPER_LEFT_PARENTHESIS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, IDENTIFIER_CLASS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, IDENTIFIER_PACKAGE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_CONST) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_DOUBLE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_FLOAT) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_PTR) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_REF) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, KEYWORD_TYPE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, PRIMITIVE_SIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
add(ARGUMENT_LIST_AFTER_FIRST, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_ARGUMENT_LIST), cT(OPTIONAL_ARGUMENT_LIST)});
eps(ARGUMENT_LIST_AFTER_FIRST);
add(ARRAY, GROUPER_LEFT_BRACKET) {cT(GROUPER_LEFT_BRACKET), cT(INTEGER_LITERAL), cT(SYMBOL_COMMA__PRUNE), cT(TYPE), cT(GROUPER_RIGHT_BRACKET)});
add(ARRAY_ACCESS_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(GROUPER_LEFT_BRACKET), cT(EXPRESSION_EXPRESSION), cT(OPTIONAL_ARRAY_ACCESS_EXPRESSION), cT(GROUPER_RIGHT_BRACKET), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, IDENTIFIER_CLASS) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, IDENTIFIER_PACKAGE) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, IDENTIFIER_VARIABLE) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, INTEGER_LITERAL) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, KEYWORD_CAST) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, KEYWORD_DELETE) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, KEYWORD_LAMBDA) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, KEYWORD_NEW) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, KEYWORD_WHEN) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, STRING) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_APETAIL) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_DOLLAR) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ASSIGNMENT_EXPRESSION, SYMBOL_MINUS) {cT(OR_EXPRESSION), cT(OPTIONAL_ASSIGNMENT_EXPRESSION)});
add(ATTRIBUTE_LIST, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(ATTRIBUTE_LIST_AFTER_CONST)});
add(ATTRIBUTE_LIST, KEYWORD_PURE) {cT(KEYWORD_PURE)});
eps(ATTRIBUTE_LIST);
add(ATTRIBUTE_LIST_AFTER_CONST, KEYWORD_PURE) {cT(KEYWORD_PURE)});
eps(ATTRIBUTE_LIST_AFTER_CONST);
add(BASIC_TYPE, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS), cT(OPTIONAL_TEMPLATE)});
add(BASIC_TYPE, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE), cT(SYMBOL_DOT__PRUNE), cT(IDENTIFIER_CLASS), cT(OPTIONAL_TEMPLATE)});
add(BASIC_TYPE, KEYWORD_DOUBLE) {cT(KEYWORD_DOUBLE)});
add(BASIC_TYPE, KEYWORD_FLOAT) {cT(KEYWORD_FLOAT)});
add(BASIC_TYPE, PRIMITIVE_SIGNED) {cT(PRIMITIVE_SIGNED)});
add(BASIC_TYPE, PRIMITIVE_UNSIGNED) {cT(PRIMITIVE_UNSIGNED)});
add(BITWISE_AND_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_CLASS) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_PACKAGE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, IDENTIFIER_VARIABLE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, INTEGER_LITERAL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, KEYWORD_CAST) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, KEYWORD_DELETE) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, KEYWORD_LAMBDA) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, KEYWORD_NEW) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, KEYWORD_WHEN) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, STRING) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_APETAIL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_DOLLAR) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_AND_EXPRESSION, SYMBOL_MINUS) {cT(EQUALITY_EXPRESSION), cT(OPTIONAL_BITWISE_AND_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_CLASS) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_PACKAGE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, KEYWORD_CAST) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, KEYWORD_DELETE) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, KEYWORD_LAMBDA) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, KEYWORD_NEW) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, KEYWORD_WHEN) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, STRING) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_APETAIL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_DOLLAR) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_OR_EXPRESSION, SYMBOL_MINUS) {cT(BITWISE_XOR_EXPRESSION), cT(OPTIONAL_BITWISE_OR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_CLASS) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_PACKAGE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, INTEGER_LITERAL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, KEYWORD_CAST) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, KEYWORD_DELETE) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, KEYWORD_LAMBDA) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, KEYWORD_NEW) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, KEYWORD_WHEN) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, STRING) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_APETAIL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_DOLLAR) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(BITWISE_XOR_EXPRESSION, SYMBOL_MINUS) {cT(BITWISE_AND_EXPRESSION), cT(OPTIONAL_BITWISE_XOR_EXPRESSION)});
add(CAPTURE_LIST, IDENTIFIER_PACKAGE) {cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, IDENTIFIER_VARIABLE) {cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_APETAIL) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_APETAIL__APETAIL) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_DOLLAR) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_DOLLAR__DOLLAR) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_EXCLAMATION_MARK) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
add(CAPTURE_LIST, SYMBOL_MINUS) {cT(UNARY_OPERATOR), cT(DATA_NAMES), cT(CAPTURE_LIST)});
eps(CAPTURE_LIST);
add(CAST_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, IDENTIFIER_CLASS) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, IDENTIFIER_PACKAGE) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, IDENTIFIER_VARIABLE) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, INTEGER_LITERAL) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, KEYWORD_CAST) {cT(KEYWORD_CAST), cT(GROUPER_LEFT_BRACKET), cT(TYPE), cT(GROUPER_RIGHT_BRACKET), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS)});
add(CAST_EXPRESSION, KEYWORD_DELETE) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, KEYWORD_LAMBDA) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, KEYWORD_NEW) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, KEYWORD_WHEN) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, STRING) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_APETAIL) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_DOLLAR) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(NEW_EXPRESSION)});
add(CAST_EXPRESSION, SYMBOL_MINUS) {cT(NEW_EXPRESSION)});
add(CLASS_MEMBER, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE)});
add(CLASS_MEMBER, IDENTIFIER_SUBROUTINE) {cT(IDENTIFIER_SUBROUTINE)});
add(CLASS_MEMBER, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE)});
add(CLASS_MEMBER_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(PARAMETER_LIST), cT(GROUPER_RIGHT_PARENTHESIS)});
add(CLASS_MEMBER_EXPRESSION, SYMBOL_DOT__PRUNE) {cT(SYMBOL_DOT__PRUNE), cT(CLASS_MEMBER), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(CODE_BLOCK, GROUPER_LEFT_BRACE) {cT(GROUPER_LEFT_BRACE), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_BRACE)});
add(DATA_DECLARATION_LIST, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, GROUPER_LEFT_PARENTHESIS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, IDENTIFIER_CLASS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, IDENTIFIER_PACKAGE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, KEYWORD_CONST) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, KEYWORD_DOUBLE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, KEYWORD_FLOAT) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, KEYWORD_PTR) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, KEYWORD_REF) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, KEYWORD_TYPE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, PRIMITIVE_SIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
add(DATA_DECLARATION_LIST, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(DATA_DECLARATION_LIST)});
eps(DATA_DECLARATION_LIST);
add(DATA_DECLARATION_STATEMENT, KEYWORD_STATIC) {cT(VAR_OR_STATIC), cT(DATA_DECLARATION_TYPE)});
add(DATA_DECLARATION_STATEMENT, KEYWORD_VAR) {cT(VAR_OR_STATIC), cT(DATA_DECLARATION_TYPE)});
add(DATA_DECLARATION_TYPE, GROUPER_LEFT_BRACE) {cT(GROUPER_LEFT_BRACE), cT(DATA_DECLARATION_LIST), cT(GROUPER_RIGHT_BRACE)});
add(DATA_DECLARATION_TYPE, GROUPER_LEFT_BRACKET) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, GROUPER_LEFT_PARENTHESIS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, IDENTIFIER_CLASS) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, IDENTIFIER_PACKAGE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, KEYWORD_CONST) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, KEYWORD_DOUBLE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, KEYWORD_FLOAT) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, KEYWORD_PTR) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, KEYWORD_REF) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, KEYWORD_TYPE) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, PRIMITIVE_SIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_DECLARATION_TYPE, PRIMITIVE_UNSIGNED) {cT(TYPE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION), cT(SYMBOL_SEMICOLON__PRUNE)});
add(DATA_NAMES, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE)});
add(DATA_NAMES, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE)});
add(DATA_OR_METHOD, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE), cT(FUNCTION_NAMES), cT(GROUPER_LEFT_BRACE), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_BRACE)});
add(DATA_OR_METHOD, KEYWORD_STATIC) {cT(DATA_DECLARATION_STATEMENT)});
add(DATA_OR_METHOD, KEYWORD_VAR) {cT(DATA_DECLARATION_STATEMENT)});
add(DEFER_STATEMENT, KEYWORD_DEFER) {cT(KEYWORD_DEFER), cT(SINGLE_STATEMENT_OR_CODE_BLOCK)});
add(DELETE_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, IDENTIFIER_CLASS) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, IDENTIFIER_PACKAGE) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, INTEGER_LITERAL) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, KEYWORD_DELETE) {cT(KEYWORD_DELETE), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS)});
add(DELETE_EXPRESSION, KEYWORD_LAMBDA) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, KEYWORD_WHEN) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, STRING) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_APETAIL) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_DOLLAR) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(UNARY_EXPRESSION)});
add(DELETE_EXPRESSION, SYMBOL_MINUS) {cT(UNARY_EXPRESSION)});
add(DO_STATEMENT, KEYWORD_DO) {cT(KEYWORD_DO), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(SINGLE_STATEMENT_OR_CODE_BLOCK)});
add(ELSE_STATEMENT, KEYWORD_ELSE) {cT(KEYWORD_ELSE), cT(SINGLE_STATEMENT_OR_CODE_BLOCK)});
eps(ELSE_STATEMENT);
add(ENTER, GROUPER_LEFT_PARENTHESIS) {cT(MEMBER_DECLARATION), cT(ENTER)});
add(ENTER, KEYWORD_ALIAS) {cT(ALIAS_STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(ENTER)});
add(ENTER, KEYWORD_GRANT) {cT(GRANT_DEFINITION), cT(ENTER)});
add(ENTER, KEYWORD_PRIVATE) {cT(MEMBER_DECLARATION), cT(ENTER)});
add(ENTER, KEYWORD_PUBLIC) {cT(MEMBER_DECLARATION), cT(ENTER)});
add(ENTER, KEYWORD_RESTRICTED) {cT(MEMBER_DECLARATION), cT(ENTER)});
add(ENTER, KEYWORD_STATIC) {cT(MEMBER_DECLARATION), cT(ENTER)});
add(ENTER, KEYWORD_VAR) {cT(MEMBER_DECLARATION), cT(ENTER)});
eps(ENTER);
add(ENUMERATION_MEMBER_EXPRESSION, SYMBOL_DOT__PRUNE) {cT(SYMBOL_DOT__PRUNE), cT(IDENTIFIER_VARIABLE)});
eps(ENUMERATION_MEMBER_EXPRESSION);
add(EQUALITY_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_CLASS) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_PACKAGE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, IDENTIFIER_VARIABLE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, INTEGER_LITERAL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, KEYWORD_CAST) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, KEYWORD_DELETE) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, KEYWORD_LAMBDA) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, KEYWORD_NEW) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, KEYWORD_WHEN) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, STRING) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_APETAIL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_DOLLAR) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EQUALITY_EXPRESSION, SYMBOL_MINUS) {cT(RELATIONAL_EXPRESSION), cT(OPTIONAL_EQUALITY_EXPRESSION)});
add(EXPRESSION_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, IDENTIFIER_CLASS) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, IDENTIFIER_PACKAGE) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, IDENTIFIER_VARIABLE) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, INTEGER_LITERAL) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, KEYWORD_CAST) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, KEYWORD_DELETE) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, KEYWORD_LAMBDA) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, KEYWORD_NEW) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, KEYWORD_WHEN) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, STRING) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_APETAIL) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_DOLLAR) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_EXPRESSION, SYMBOL_MINUS) {cT(ASSIGNMENT_EXPRESSION)});
add(EXPRESSION_LIST, GROUPER_LEFT_BRACKET) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, GROUPER_LEFT_PARENTHESIS) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, IDENTIFIER_CLASS) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, IDENTIFIER_ENUMERATION) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, IDENTIFIER_PACKAGE) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, IDENTIFIER_SUBROUTINE) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, IDENTIFIER_VARIABLE) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, INTEGER_LITERAL) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, KEYWORD_CAST) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, KEYWORD_DELETE) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, KEYWORD_LAMBDA) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, KEYWORD_NEW) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, KEYWORD_WHEN) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, STRING) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_APETAIL) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_APETAIL__APETAIL) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_DOLLAR) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_DOLLAR__DOLLAR) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_EXCLAMATION_MARK) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
add(EXPRESSION_LIST, SYMBOL_MINUS) {cT(EXPRESSION_EXPRESSION), cT(EXPRESSION_LIST)});
eps(EXPRESSION_LIST);
add(FOR_DATA_DECLARATION, GROUPER_LEFT_BRACE) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, GROUPER_LEFT_BRACKET) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, GROUPER_LEFT_PARENTHESIS) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, IDENTIFIER_CLASS) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, IDENTIFIER_PACKAGE) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, KEYWORD_CONST) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, KEYWORD_DOUBLE) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, KEYWORD_FLOAT) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, KEYWORD_PTR) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, KEYWORD_REF) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, KEYWORD_TYPE) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, PRIMITIVE_SIGNED) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, PRIMITIVE_UNSIGNED) {cT(DATA_DECLARATION_TYPE)});
add(FOR_DATA_DECLARATION, SYMBOL_SEMICOLON__PRUNE) {cT(SYMBOL_SEMICOLON__PRUNE)});
add(FOR_STATEMENT, KEYWORD_FOR) {cT(KEYWORD_FOR), cT(GROUPER_LEFT_PARENTHESIS), cT(FOR_DATA_DECLARATION), cT(EXPRESSION_EXPRESSION), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST), cT(GROUPER_RIGHT_PARENTHESIS), cT(SINGLE_STATEMENT_OR_CODE_BLOCK)});
add(FUNCTION_NAMES, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE)});
add(FUNCTION_NAMES, IDENTIFIER_SUBROUTINE) {cT(IDENTIFIER_SUBROUTINE)});
add(FUNCTION_NAMES, SYMBOL_EQUAL__EQUAL) {cT(SYMBOL_EQUAL__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_EXCLAMATION_MARK__EQUAL) {cT(SYMBOL_EXCLAMATION_MARK__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_FORWARD_SLASH) {cT(SYMBOL_FORWARD_SLASH)});
add(FUNCTION_NAMES, SYMBOL_FORWARD_SLASH__EQUAL) {cT(SYMBOL_FORWARD_SLASH__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_GREATER_THAN) {cT(SYMBOL_GREATER_THAN)});
add(FUNCTION_NAMES, SYMBOL_GREATER_THAN__EQUAL) {cT(SYMBOL_GREATER_THAN__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_GREATER_THAN__GREATER_THAN) {cT(SYMBOL_GREATER_THAN__GREATER_THAN)});
add(FUNCTION_NAMES, SYMBOL_GREATER_THAN__GREATER_THAN__EQUAL) {cT(SYMBOL_GREATER_THAN__GREATER_THAN__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_LESS_THAN) {cT(SYMBOL_LESS_THAN)});
add(FUNCTION_NAMES, SYMBOL_LESS_THAN__EQUAL) {cT(SYMBOL_LESS_THAN__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_LESS_THAN__LESS_THAN) {cT(SYMBOL_LESS_THAN__LESS_THAN)});
add(FUNCTION_NAMES, SYMBOL_LESS_THAN__LESS_THAN__EQUAL) {cT(SYMBOL_LESS_THAN__LESS_THAN__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_MINUS) {cT(SYMBOL_MINUS)});
add(FUNCTION_NAMES, SYMBOL_MINUS__EQUAL) {cT(SYMBOL_MINUS__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_MINUS__MINUS) {cT(SYMBOL_MINUS__MINUS)});
add(FUNCTION_NAMES, SYMBOL_PERCENT) {cT(SYMBOL_PERCENT)});
add(FUNCTION_NAMES, SYMBOL_PERCENT__EQUAL) {cT(SYMBOL_PERCENT__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_PLUS) {cT(SYMBOL_PLUS)});
add(FUNCTION_NAMES, SYMBOL_PLUS__EQUAL) {cT(SYMBOL_PLUS__EQUAL)});
add(FUNCTION_NAMES, SYMBOL_PLUS__PLUS) {cT(SYMBOL_PLUS__PLUS)});
add(FUNCTION_NAMES, SYMBOL_STAR) {cT(SYMBOL_STAR)});
add(FUNCTION_NAMES, SYMBOL_STAR__EQUAL) {cT(SYMBOL_STAR__EQUAL)});
add(FUNCTION_SIGNATURE, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(ARGUMENT_LIST), cT(SYMBOL_COLON__PRUNE), cT(ARGUMENT_LIST), cT(OPTIONAL_ATTRIBUTE_LIST), cT(GROUPER_RIGHT_PARENTHESIS)});
add(GOTO_STATEMENT, KEYWORD_GOTO) {cT(KEYWORD_GOTO), cT(DATA_NAMES)});
add(GRANT_DEFINITION, KEYWORD_GRANT) {cT(KEYWORD_GRANT), cT(IDENTIFIER_CLASS), cT(GROUPER_LEFT_BRACE), cT(GRANT_LIST), cT(GROUPER_RIGHT_BRACE)});
add(GRANT_LIST, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE), cT(FUNCTION_NAMES), cT(OPTIONAL_FUNCTION_NAME_LIST), cT(SYMBOL_SEMICOLON__PRUNE), cT(OPTIONAL_GRANT_LIST)});
add(GRANT_LIST, KEYWORD_STATIC) {cT(VAR_OR_STATIC), cT(TYPE), cT(VARIABLE_NAMES), cT(OPTIONAL_DATA_NAME_LIST), cT(SYMBOL_SEMICOLON__PRUNE), cT(OPTIONAL_GRANT_LIST)});
add(GRANT_LIST, KEYWORD_VAR) {cT(VAR_OR_STATIC), cT(TYPE), cT(VARIABLE_NAMES), cT(OPTIONAL_DATA_NAME_LIST), cT(SYMBOL_SEMICOLON__PRUNE), cT(OPTIONAL_GRANT_LIST)});
add(HACK_STATEMENT, KEYWORD_HACK) {cT(KEYWORD_HACK), cT(GROUPER_LEFT_PARENTHESIS), cT(PARAMETER_LIST), cT(GROUPER_RIGHT_PARENTHESIS)});
add(IF_STATEMENT, KEYWORD_IF) {cT(KEYWORD_IF), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(SINGLE_STATEMENT_OR_CODE_BLOCK), cT(ELSE_STATEMENT)});
add(ITER_STATEMENT, SYMBOL_MINUS__MINUS) {cT(SYMBOL_MINUS__MINUS), cT(EXPRESSION_EXPRESSION)});
add(ITER_STATEMENT, SYMBOL_PLUS__PLUS) {cT(SYMBOL_PLUS__PLUS), cT(EXPRESSION_EXPRESSION)});
add(LABEL_STATEMENT, KEYWORD_LABEL) {cT(KEYWORD_LABEL), cT(DATA_NAMES)});
add(MEMBER_DECLARATION, GROUPER_LEFT_PARENTHESIS) {cT(ACCESS_SPECIFIER), cT(DATA_OR_METHOD)});
add(MEMBER_DECLARATION, KEYWORD_PRIVATE) {cT(ACCESS_SPECIFIER), cT(DATA_OR_METHOD)});
add(MEMBER_DECLARATION, KEYWORD_PUBLIC) {cT(ACCESS_SPECIFIER), cT(DATA_OR_METHOD)});
add(MEMBER_DECLARATION, KEYWORD_RESTRICTED) {cT(ACCESS_SPECIFIER), cT(DATA_OR_METHOD)});
add(MEMBER_DECLARATION, KEYWORD_STATIC) {cT(ACCESS_SPECIFIER), cT(DATA_OR_METHOD)});
add(MEMBER_DECLARATION, KEYWORD_VAR) {cT(ACCESS_SPECIFIER), cT(DATA_OR_METHOD)});
add(MEMBER_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS), cT(CLASS_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(IDENTIFIER_ENUMERATION), cT(ENUMERATION_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_PACKAGE) {cT(IDENTIFIER_PACKAGE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(IDENTIFIER_SUBROUTINE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, INTEGER_LITERAL) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, KEYWORD_LAMBDA) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, KEYWORD_WHEN) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MEMBER_EXPRESSION, STRING) {cT(RESOURCE), cT(OPTIONAL_MEMBER_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_CLASS) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_PACKAGE) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, IDENTIFIER_VARIABLE) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, INTEGER_LITERAL) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, KEYWORD_CAST) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, KEYWORD_DELETE) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, KEYWORD_LAMBDA) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, KEYWORD_NEW) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, KEYWORD_WHEN) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, STRING) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_APETAIL) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_DOLLAR) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(MULTIPLICATIVE_EXPRESSION, SYMBOL_MINUS) {cT(CAST_EXPRESSION), cT(OPTIONAL_MULTIPLICATIVE_EXPRESSION)});
add(NEW_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, IDENTIFIER_CLASS) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, IDENTIFIER_PACKAGE) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, IDENTIFIER_VARIABLE) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, INTEGER_LITERAL) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, KEYWORD_DELETE) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, KEYWORD_LAMBDA) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, KEYWORD_NEW) {cT(KEYWORD_NEW), cT(GROUPER_LEFT_BRACKET), cT(TYPE), cT(GROUPER_RIGHT_BRACKET), cT(OPTIONAL_NEW_LIST), cT(OPTIONAL_CONSTRUCTOR_LIST)});
add(NEW_EXPRESSION, KEYWORD_WHEN) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, STRING) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_APETAIL) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_DOLLAR) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(DELETE_EXPRESSION)});
add(NEW_EXPRESSION, SYMBOL_MINUS) {cT(DELETE_EXPRESSION)});
add(NO_SEMICOLON_STATEMENT, GROUPER_LEFT_BRACE) {cT(CODE_BLOCK)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_DEFER) {cT(DEFER_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_DO) {cT(DO_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_FOR) {cT(FOR_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_IF) {cT(IF_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_STATIC) {cT(DATA_DECLARATION_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_STATICS) {cT(STATIC_IF_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_VAR) {cT(DATA_DECLARATION_STATEMENT)});
add(NO_SEMICOLON_STATEMENT, KEYWORD_WHILE) {cT(WHILE_STATEMENT)});
add(OPTIONAL_ADDITIVE_EXPRESSION, SYMBOL_MINUS) {cT(SYMBOL_MINUS), cT(ADDITIVE_EXPRESSION)});
add(OPTIONAL_ADDITIVE_EXPRESSION, SYMBOL_PLUS) {cT(SYMBOL_PLUS), cT(ADDITIVE_EXPRESSION)});
eps(OPTIONAL_ADDITIVE_EXPRESSION);
add(OPTIONAL_AND_EXPRESSION, SYMBOL_AMPERSAND__AMPERSAND) {cT(SYMBOL_AMPERSAND__AMPERSAND), cT(AND_EXPRESSION)});
eps(OPTIONAL_AND_EXPRESSION);
add(OPTIONAL_ARGUMENT_LIST, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(ARGUMENT_LIST_AFTER_FIRST)});
eps(OPTIONAL_ARGUMENT_LIST);
add(OPTIONAL_ARRAY_ACCESS_EXPRESSION, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(EXPRESSION_EXPRESSION), cT(OPTIONAL_ARRAY_ACCESS_EXPRESSION)});
eps(OPTIONAL_ARRAY_ACCESS_EXPRESSION);
add(OPTIONAL_ASSIGNMENT, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(PARAMETER_LIST), cT(GROUPER_RIGHT_PARENTHESIS)});
add(OPTIONAL_ASSIGNMENT, SYMBOL_EQUAL) {cT(SYMBOL_EQUAL), cT(EXPRESSION_EXPRESSION)});
eps(OPTIONAL_ASSIGNMENT);
add(OPTIONAL_ASSIGNMENT_EXPRESSION, SYMBOL_EQUAL) {cT(SYMBOL_EQUAL), cT(OR_EXPRESSION)});
add(OPTIONAL_ASSIGNMENT_EXPRESSION, SYMBOL_FORWARD_SLASH__EQUAL) {cT(SYMBOL_FORWARD_SLASH__EQUAL), cT(OR_EXPRESSION)});
add(OPTIONAL_ASSIGNMENT_EXPRESSION, SYMBOL_MINUS__EQUAL) {cT(SYMBOL_MINUS__EQUAL), cT(OR_EXPRESSION)});
add(OPTIONAL_ASSIGNMENT_EXPRESSION, SYMBOL_PLUS__EQUAL) {cT(SYMBOL_PLUS__EQUAL), cT(OR_EXPRESSION)});
add(OPTIONAL_ASSIGNMENT_EXPRESSION, SYMBOL_STAR__EQUAL) {cT(SYMBOL_STAR__EQUAL), cT(OR_EXPRESSION)});
eps(OPTIONAL_ASSIGNMENT_EXPRESSION);
add(OPTIONAL_ATTRIBUTE_LIST, SYMBOL_COLON__PRUNE) {cT(SYMBOL_COLON__PRUNE), cT(ATTRIBUTE_LIST)});
eps(OPTIONAL_ATTRIBUTE_LIST);
add(OPTIONAL_BITWISE_AND_EXPRESSION, SYMBOL_AMPERSAND) {cT(SYMBOL_AMPERSAND), cT(BITWISE_AND_EXPRESSION)});
eps(OPTIONAL_BITWISE_AND_EXPRESSION);
add(OPTIONAL_BITWISE_OR_EXPRESSION, SYMBOL_BAR) {cT(SYMBOL_BAR), cT(BITWISE_OR_EXPRESSION)});
eps(OPTIONAL_BITWISE_OR_EXPRESSION);
add(OPTIONAL_BITWISE_XOR_EXPRESSION, SYMBOL_CARET) {cT(SYMBOL_CARET), cT(BITWISE_XOR_EXPRESSION)});
eps(OPTIONAL_BITWISE_XOR_EXPRESSION);
add(OPTIONAL_CAPTURE_LIST, GROUPER_LEFT_BRACKET) {cT(GROUPER_LEFT_BRACKET), cT(CAPTURE_LIST), cT(GROUPER_RIGHT_BRACKET)});
eps(OPTIONAL_CAPTURE_LIST);
add(OPTIONAL_CONSTRUCTOR_LIST, GROUPER_LEFT_BRACE) {cT(GROUPER_LEFT_BRACE), cT(PARAMETER_LIST), cT(GROUPER_RIGHT_BRACE)});
eps(OPTIONAL_CONSTRUCTOR_LIST);
add(OPTIONAL_DATA_DECLARATION, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(DATA_NAMES), cT(OPTIONAL_ASSIGNMENT), cT(OPTIONAL_DATA_DECLARATION)});
eps(OPTIONAL_DATA_DECLARATION);
add(OPTIONAL_DATA_NAME_LIST, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(DATA_NAMES), cT(OPTIONAL_DATA_NAME_LIST)});
eps(OPTIONAL_DATA_NAME_LIST);
add(OPTIONAL_EQUALITY_EXPRESSION, SYMBOL_EQUAL__EQUAL) {cT(SYMBOL_EQUAL__EQUAL), cT(EQUALITY_EXPRESSION)});
eps(OPTIONAL_EQUALITY_EXPRESSION);
add(OPTIONAL_EXPRESSION, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(EXPRESSION_EXPRESSION)});
eps(OPTIONAL_EXPRESSION);
add(OPTIONAL_EXTRACTOR_EXPRESSION, SYMBOL_TILDE__PRUNE) {cT(SYMBOL_TILDE__PRUNE), cT(DATA_NAMES), cT(OPTIONAL_MEMBER_EXPRESSION)});
eps(OPTIONAL_EXTRACTOR_EXPRESSION);
add(OPTIONAL_FUNCTION_NAME_LIST, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(FUNCTION_NAMES), cT(OPTIONAL_FUNCTION_NAME_LIST)});
eps(OPTIONAL_FUNCTION_NAME_LIST);
add(OPTIONAL_GRANT_LIST, GROUPER_LEFT_PARENTHESIS) {cT(ACCESS_SPECIFIER), cT(GRANT_LIST)});
add(OPTIONAL_GRANT_LIST, KEYWORD_PRIVATE) {cT(ACCESS_SPECIFIER), cT(GRANT_LIST)});
add(OPTIONAL_GRANT_LIST, KEYWORD_PUBLIC) {cT(ACCESS_SPECIFIER), cT(GRANT_LIST)});
add(OPTIONAL_GRANT_LIST, KEYWORD_RESTRICTED) {cT(ACCESS_SPECIFIER), cT(GRANT_LIST)});
add(OPTIONAL_GRANT_LIST, KEYWORD_STATIC) {cT(ACCESS_SPECIFIER), cT(GRANT_LIST)});
add(OPTIONAL_GRANT_LIST, KEYWORD_VAR) {cT(ACCESS_SPECIFIER), cT(GRANT_LIST)});
eps(OPTIONAL_GRANT_LIST);
add(OPTIONAL_MEMBER_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(ARRAY_ACCESS_EXPRESSION)});
add(OPTIONAL_MEMBER_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(PARAMETER_LIST), cT(GROUPER_RIGHT_PARENTHESIS), cT(OPTIONAL_EXTRACTOR_EXPRESSION)});
add(OPTIONAL_MEMBER_EXPRESSION, SYMBOL_DOT__PRUNE) {cT(SYMBOL_DOT__PRUNE), cT(MEMBER_EXPRESSION)});
eps(OPTIONAL_MEMBER_EXPRESSION);
add(OPTIONAL_MULTIPLICATIVE_EXPRESSION, SYMBOL_FORWARD_SLASH) {cT(SYMBOL_FORWARD_SLASH), cT(MULTIPLICATIVE_EXPRESSION)});
add(OPTIONAL_MULTIPLICATIVE_EXPRESSION, SYMBOL_STAR) {cT(SYMBOL_STAR), cT(MULTIPLICATIVE_EXPRESSION)});
eps(OPTIONAL_MULTIPLICATIVE_EXPRESSION);
add(OPTIONAL_NEW_LIST, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(OPTIONAL_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS)});
eps(OPTIONAL_NEW_LIST);
add(OPTIONAL_OR_EXPRESSION, SYMBOL_BAR__BAR) {cT(SYMBOL_BAR__BAR), cT(OR_EXPRESSION)});
eps(OPTIONAL_OR_EXPRESSION);
add(OPTIONAL_PARAMETER_LIST, SYMBOL_COMMA__PRUNE) {cT(SYMBOL_COMMA__PRUNE), cT(PARAMETER_LIST)});
eps(OPTIONAL_PARAMETER_LIST);
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_GREATER_THAN) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_GREATER_THAN__EQUAL) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_LESS_THAN) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
add(OPTIONAL_RELATIONAL_EXPRESSION, SYMBOL_LESS_THAN__EQUAL) {cT(RELATIONAL_OPERATOR), cT(EQUALITY_EXPRESSION)});
eps(OPTIONAL_RELATIONAL_EXPRESSION);
add(OPTIONAL_TEMPLATE, GROUPER_LEFT_BRACKET) {cT(GROUPER_LEFT_BRACKET), cT(TEMPLATE_LIST), cT(GROUPER_RIGHT_BRACKET)});
eps(OPTIONAL_TEMPLATE);
add(OPTIONAL_TEMPLATE_LIST, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS), cT(SYMBOL_COLON__PRUNE), cT(TYPE), cT(OPTIONAL_TEMPLATE_LIST)});
add(OPTIONAL_TEMPLATE_LIST, SYMBOL_COLON__PRUNE) {cT(SYMBOL_COLON__PRUNE), cT(TYPE), cT(OPTIONAL_TEMPLATE_LIST)});
eps(OPTIONAL_TEMPLATE_LIST);
add(OR_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_CLASS) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_PACKAGE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, IDENTIFIER_VARIABLE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, INTEGER_LITERAL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, KEYWORD_CAST) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, KEYWORD_DELETE) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, KEYWORD_LAMBDA) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, KEYWORD_NEW) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, KEYWORD_WHEN) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, STRING) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_APETAIL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_DOLLAR) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(OR_EXPRESSION, SYMBOL_MINUS) {cT(AND_EXPRESSION), cT(OPTIONAL_OR_EXPRESSION)});
add(PARAMETER_LIST, IDENTIFIER_PACKAGE) {cT(DATA_NAMES), cT(SYMBOL_COLON__PRUNE), cT(EXPRESSION_EXPRESSION), cT(OPTIONAL_PARAMETER_LIST)});
add(PARAMETER_LIST, IDENTIFIER_VARIABLE) {cT(DATA_NAMES), cT(SYMBOL_COLON__PRUNE), cT(EXPRESSION_EXPRESSION), cT(OPTIONAL_PARAMETER_LIST)});
add(PARAMETER_LIST, SYMBOL_COLON__PRUNE) {cT(SYMBOL_COLON__PRUNE), cT(EXPRESSION_EXPRESSION), cT(OPTIONAL_PARAMETER_LIST)});
eps(PARAMETER_LIST);
add(RELATIONAL_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_CLASS) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_PACKAGE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, IDENTIFIER_VARIABLE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, INTEGER_LITERAL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, KEYWORD_CAST) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, KEYWORD_DELETE) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, KEYWORD_LAMBDA) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, KEYWORD_NEW) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, KEYWORD_WHEN) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, STRING) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_APETAIL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_DOLLAR) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_EXPRESSION, SYMBOL_MINUS) {cT(ADDITIVE_EXPRESSION), cT(OPTIONAL_RELATIONAL_EXPRESSION)});
add(RELATIONAL_OPERATOR, SYMBOL_GREATER_THAN) {cT(SYMBOL_GREATER_THAN)});
add(RELATIONAL_OPERATOR, SYMBOL_GREATER_THAN__EQUAL) {cT(SYMBOL_GREATER_THAN__EQUAL)});
add(RELATIONAL_OPERATOR, SYMBOL_LESS_THAN) {cT(SYMBOL_LESS_THAN)});
add(RELATIONAL_OPERATOR, SYMBOL_LESS_THAN__EQUAL) {cT(SYMBOL_LESS_THAN__EQUAL)});
add(RESOURCE, GROUPER_LEFT_BRACKET) {cT(GROUPER_LEFT_BRACKET), cT(EXPRESSION_LIST), cT(GROUPER_RIGHT_BRACKET)});
add(RESOURCE, GROUPER_LEFT_PARENTHESIS) {cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS)});
add(RESOURCE, INTEGER_LITERAL) {cT(INTEGER_LITERAL)});
add(RESOURCE, KEYWORD_LAMBDA) {cT(KEYWORD_LAMBDA), cT(OPTIONAL_CAPTURE_LIST), cT(FUNCTION_SIGNATURE), cT(CODE_BLOCK)});
add(RESOURCE, KEYWORD_WHEN) {cT(WHEN_EXPRESSION)});
add(RESOURCE, STRING) {cT(STRING)});
add(RETURN_STATEMENT, KEYWORD_RETURN) {cT(KEYWORD_RETURN), cT(PARAMETER_LIST)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, GROUPER_LEFT_BRACE) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, GROUPER_LEFT_BRACKET) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, GROUPER_LEFT_PARENTHESIS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, IDENTIFIER_CLASS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, IDENTIFIER_ENUMERATION) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, IDENTIFIER_PACKAGE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, IDENTIFIER_SUBROUTINE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, IDENTIFIER_VARIABLE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, INTEGER_LITERAL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_ALIAS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_CAST) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_DEFER) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_DELETE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_DO) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_FOR) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_GOTO) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_HACK) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_IF) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_LABEL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_LAMBDA) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_NEW) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_RETURN) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_STATIC) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_STATICS) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_VAR) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_WHEN) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, KEYWORD_WHILE) {cT(NO_SEMICOLON_STATEMENT)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, STRING) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_APETAIL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_APETAIL__APETAIL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_DOLLAR) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_DOLLAR__DOLLAR) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_EXCLAMATION_MARK) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_MINUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_MINUS__MINUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(SINGLE_STATEMENT_OR_CODE_BLOCK, SYMBOL_PLUS__PLUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE)});
add(STATEMENT, GROUPER_LEFT_BRACKET) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, GROUPER_LEFT_PARENTHESIS) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, IDENTIFIER_CLASS) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, IDENTIFIER_ENUMERATION) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, IDENTIFIER_PACKAGE) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, IDENTIFIER_SUBROUTINE) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, IDENTIFIER_VARIABLE) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, INTEGER_LITERAL) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, KEYWORD_ALIAS) {cT(ALIAS_STATEMENT)});
add(STATEMENT, KEYWORD_CAST) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, KEYWORD_DELETE) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, KEYWORD_GOTO) {cT(GOTO_STATEMENT)});
add(STATEMENT, KEYWORD_HACK) {cT(HACK_STATEMENT)});
add(STATEMENT, KEYWORD_LABEL) {cT(LABEL_STATEMENT)});
add(STATEMENT, KEYWORD_LAMBDA) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, KEYWORD_NEW) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, KEYWORD_RETURN) {cT(RETURN_STATEMENT)});
add(STATEMENT, KEYWORD_WHEN) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, STRING) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_APETAIL) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_APETAIL__APETAIL) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_DOLLAR) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_DOLLAR__DOLLAR) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_EXCLAMATION_MARK) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_MINUS) {cT(EXPRESSION_EXPRESSION)});
add(STATEMENT, SYMBOL_MINUS__MINUS) {cT(ITER_STATEMENT)});
add(STATEMENT, SYMBOL_PLUS__PLUS) {cT(ITER_STATEMENT)});
add(STATEMENT_LIST, GROUPER_LEFT_BRACE) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, GROUPER_LEFT_BRACKET) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, GROUPER_LEFT_PARENTHESIS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_CLASS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_ENUMERATION) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_PACKAGE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_SUBROUTINE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, IDENTIFIER_VARIABLE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, INTEGER_LITERAL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_ALIAS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_CAST) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_DEFER) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_DELETE) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_DO) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_FOR) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_GOTO) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_HACK) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_IF) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_LABEL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_LAMBDA) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_NEW) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_RETURN) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_STATIC) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_STATICS) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_VAR) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_WHEN) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, KEYWORD_WHILE) {cT(NO_SEMICOLON_STATEMENT), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, STRING) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_APETAIL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_APETAIL__APETAIL) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_DOLLAR) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_DOLLAR__DOLLAR) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_EXCLAMATION_MARK) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_MINUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_MINUS__MINUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
add(STATEMENT_LIST, SYMBOL_PLUS__PLUS) {cT(STATEMENT), cT(SYMBOL_SEMICOLON__PRUNE), cT(STATEMENT_LIST)});
eps(STATEMENT_LIST);
add(STATIC_ELSE_STATEMENT, KEYWORD_STATICS) {cT(KEYWORD_STATICS), cT(KEYWORD_ELSE), cT(SINGLE_STATEMENT_OR_CODE_BLOCK)});
eps(STATIC_ELSE_STATEMENT);
add(STATIC_IF_STATEMENT, KEYWORD_STATICS) {cT(KEYWORD_STATICS), cT(KEYWORD_IF), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(SINGLE_STATEMENT_OR_CODE_BLOCK), cT(STATIC_ELSE_STATEMENT)});
add(TEMPLATE_LIST, IDENTIFIER_CLASS) {cT(IDENTIFIER_CLASS), cT(SYMBOL_COLON__PRUNE), cT(TYPE), cT(OPTIONAL_TEMPLATE_LIST)});
add(TEMPLATE_LIST, SYMBOL_COLON__PRUNE) {cT(SYMBOL_COLON__PRUNE), cT(TYPE), cT(OPTIONAL_TEMPLATE_LIST)});
add(TYPE, GROUPER_LEFT_BRACKET) {cT(ARRAY)});
add(TYPE, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE)});
add(TYPE, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE, IDENTIFIER_PACKAGE) {cT(BASIC_TYPE)});
add(TYPE, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(TYPE_AFTER_CONST)});
add(TYPE, KEYWORD_DOUBLE) {cT(BASIC_TYPE)});
add(TYPE, KEYWORD_FLOAT) {cT(BASIC_TYPE)});
add(TYPE, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE_AFTER_PTR)});
add(TYPE, KEYWORD_REF) {cT(KEYWORD_REF), cT(TYPE_AFTER_REF)});
add(TYPE, KEYWORD_TYPE) {cT(TYPE_EXPRESSION)});
add(TYPE, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, GROUPER_LEFT_BRACKET) {cT(ARRAY)});
add(TYPE_AFTER_CONST, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, IDENTIFIER_PACKAGE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, KEYWORD_DOUBLE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, KEYWORD_FLOAT) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE_AFTER_CONST, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_CONST, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_PTR, GROUPER_LEFT_BRACKET) {cT(ARRAY)});
add(TYPE_AFTER_PTR, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE)});
add(TYPE_AFTER_PTR, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_PTR, IDENTIFIER_PACKAGE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_PTR, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(TYPE_AFTER_CONST)});
add(TYPE_AFTER_PTR, KEYWORD_DOUBLE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_PTR, KEYWORD_FLOAT) {cT(BASIC_TYPE)});
add(TYPE_AFTER_PTR, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE_AFTER_PTR)});
add(TYPE_AFTER_PTR, KEYWORD_REF) {cT(KEYWORD_REF), cT(TYPE_AFTER_REF)});
add(TYPE_AFTER_PTR, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_PTR, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, GROUPER_LEFT_BRACKET) {cT(ARRAY)});
add(TYPE_AFTER_REF, GROUPER_LEFT_PARENTHESIS) {cT(FUNCTION_SIGNATURE)});
add(TYPE_AFTER_REF, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, IDENTIFIER_PACKAGE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, KEYWORD_CONST) {cT(KEYWORD_CONST), cT(TYPE_AFTER_REF_CONST)});
add(TYPE_AFTER_REF, KEYWORD_DOUBLE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, KEYWORD_FLOAT) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE_AFTER_REF, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, IDENTIFIER_CLASS) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, IDENTIFIER_PACKAGE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, KEYWORD_DOUBLE) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, KEYWORD_FLOAT) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, KEYWORD_PTR) {cT(KEYWORD_PTR), cT(TYPE)});
add(TYPE_AFTER_REF_CONST, PRIMITIVE_SIGNED) {cT(BASIC_TYPE)});
add(TYPE_AFTER_REF_CONST, PRIMITIVE_UNSIGNED) {cT(BASIC_TYPE)});
add(TYPE_EXPRESSION, KEYWORD_TYPE) {cT(KEYWORD_TYPE), cT(GROUPER_LEFT_BRACKET), cT(VARIABLE_NAMES), cT(GROUPER_RIGHT_BRACKET)});
add(UNARY_EXPRESSION, GROUPER_LEFT_BRACKET) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, GROUPER_LEFT_PARENTHESIS) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_CLASS) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_ENUMERATION) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_PACKAGE) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_SUBROUTINE) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, IDENTIFIER_VARIABLE) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, INTEGER_LITERAL) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, KEYWORD_LAMBDA) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, KEYWORD_WHEN) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, STRING) {cT(MEMBER_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_APETAIL) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_APETAIL__APETAIL) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_DOLLAR) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_DOLLAR__DOLLAR) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_EXCLAMATION_MARK) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_EXPRESSION, SYMBOL_MINUS) {cT(UNARY_OPERATOR), cT(CAST_EXPRESSION)});
add(UNARY_OPERATOR, SYMBOL_APETAIL) {cT(SYMBOL_APETAIL)});
add(UNARY_OPERATOR, SYMBOL_APETAIL__APETAIL) {cT(SYMBOL_APETAIL__APETAIL)});
add(UNARY_OPERATOR, SYMBOL_DOLLAR) {cT(SYMBOL_DOLLAR)});
add(UNARY_OPERATOR, SYMBOL_DOLLAR__DOLLAR) {cT(SYMBOL_DOLLAR__DOLLAR)});
add(UNARY_OPERATOR, SYMBOL_EXCLAMATION_MARK) {cT(SYMBOL_EXCLAMATION_MARK)});
add(UNARY_OPERATOR, SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK) {cT(SYMBOL_EXCLAMATION_MARK__EXCLAMATION_MARK)});
add(UNARY_OPERATOR, SYMBOL_MINUS) {cT(SYMBOL_MINUS)});
add(VARIABLE_NAMES, IDENTIFIER_PACKAGE) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, IDENTIFIER_SUBROUTINE) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, IDENTIFIER_VARIABLE) {cT(IDENTIFIER_VARIABLE)});
add(VARIABLE_NAMES, SYMBOL_EQUAL__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_EXCLAMATION_MARK__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_FORWARD_SLASH) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_FORWARD_SLASH__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_GREATER_THAN) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_GREATER_THAN__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_GREATER_THAN__GREATER_THAN) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_GREATER_THAN__GREATER_THAN__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_LESS_THAN) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_LESS_THAN__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_LESS_THAN__LESS_THAN) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_LESS_THAN__LESS_THAN__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_MINUS) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_MINUS__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_MINUS__MINUS) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_PERCENT) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_PERCENT__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_PLUS) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_PLUS__EQUAL) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_PLUS__PLUS) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_STAR) {cT(FUNCTION_NAMES)});
add(VARIABLE_NAMES, SYMBOL_STAR__EQUAL) {cT(FUNCTION_NAMES)});
add(VAR_OR_STATIC, KEYWORD_STATIC) {cT(KEYWORD_STATIC)});
add(VAR_OR_STATIC, KEYWORD_VAR) {cT(KEYWORD_VAR)});
add(WHEN_EXPRESSION, KEYWORD_WHEN) {cT(KEYWORD_WHEN), cT(GROUPER_LEFT_PARENTHESIS), cT(OR_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(OR_EXPRESSION), cT(KEYWORD_ELSE), cT(OR_EXPRESSION)});
add(WHILE_STATEMENT, KEYWORD_WHILE) {cT(KEYWORD_WHILE), cT(GROUPER_LEFT_PARENTHESIS), cT(EXPRESSION_EXPRESSION), cT(GROUPER_RIGHT_PARENTHESIS), cT(SINGLE_STATEMENT_OR_CODE_BLOCK)});