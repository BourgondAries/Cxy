#pragma once

namespace tul
{
  namespace protocols
  {
    /**
      Used by the LL(1) parser's token stack. This class contains all terminals
      and non-terminals (hence the name cross-terminal).
    */
    enum class CrossTerminal
    {
      // The first two symbols put onto the stack
      // Special Non-Terminals, these are not treated specially.
      // They can just not be generated by any valid input.
      ENTER, EXIT,

      // Unknown crossterminal
      NONE,

      // Grammar Non-Terminals

      // A general structure in this enum, in order to describe the grammar.
      // It's informal. See the CrossTerminalParser for the grammar specification.
      // These are the symbols that are expected from a valid file.


      // ENTER
        FIELD_DECLARATION_LIST,
          DECLARATION,
            ACCESS_SPECIFIER,
              // IDENTIFIER_VARIABLE,
                OPTIONAL_EQUALS,
                  // IDENTIFIER_CLASS
                    // GROUPER_LEFT_PARENTHESIS
                      COMMA_SEPARATED_LIST,
                        // GROUPER_RIGHT_PARENTHESIS
                          // SYMBOL_SEMICOLON       // Example: `AlphaCentauri some_identifier = AlphaCentauri(312, "cool!");`
                OPTIONAL_CALL,   // When we want to state: AlphaCentauri some_identifier(312, "cool!");
                  // GROUPER_LEFT_PARENTHESIS
                    // COMMA_SEPARATED_LIST
                      // GROUPER_RIGHT_PARENTHESIS
                        // SYMBOL_SEMICOLON
        METHOD_DECLARATION_LIST,
          // ACCESS_SPECIFIER
            // GROUPER_LEFT_PARENTHESIS
              COMMA_SEPARATED_TYPE_AND_NAME_LIST,
                // SYMBOL_COLON
                  // COMMA_SEPARATED_TYPE_AND_NAME_LIST,
                    // GROUPER_RIGHT_PARENTHESIS
                      // IDENTIFIER_SUBROUTINE
                        // GROUPER_LEFT_BRACE
                          STATEMENT_LIST,
                            // GROUPER_RIGHT_BRACE

      COMMA_SEPARATED_LIST_ITEM,  // This can be any rvalue, so any identifier, string, numeric literal, or a Class().
      STATEMENT,
      TYPE,

      // Terminals
      GROUPER_LEFT_BRACE,
      GROUPER_RIGHT_BRACE,
      GROUPER_LEFT_BRACKET,
      GROUPER_RIGHT_BRACKET,
      GROUPER_LEFT_PARENTHESIS,
      GROUPER_RIGHT_PARENTHESIS,

      IDENTIFIER_CLASS,
      IDENTIFIER_ENUMERATION,
      IDENTIFIER_PACKAGE,
      IDENTIFIER_SUBROUTINE,
      IDENTIFIER_VARIABLE,

      INTEGER_LITERAL,

      KEYWORD_ASSEMBLY,
      KEYWORD_DO,
      KEYWORD_FOR,
      KEYWORD_GOTO,
      KEYWORD_IF,
      KEYWORD_LABEL,
      KEYWORD_PRIVATE,
      KEYWORD_PUBLIC,
      KEYWORD_RESTRICTED,
      KEYWORD_WHILE,

      PRIMITIVE_SIGNED,
      PRIMITIVE_UNSIGNED,

      STRING,

      SYMBOL_PLUS,
      SYMBOL_PLUS_PLUS,
      SYMBOL_MINUS,
      SYMBOL_MINUS_MINUS,
      SYMBOL_STAR,
      SYMBOL_STAR_STAR,
      SYMBOL_FORWARD_SLASH,
      SYMBOL_BACKWARD_SLASH,
      SYMBOL_AMPERSAND_AMPERSAND,
      SYMBOL_BAR_BAR,
      SYMBOL_AMPERSAND,
      SYMBOL_BAR,
      SYMBOL_CARET,
      SYMBOL_EXCLAMATION_MARK,
      SYMBOL_DOT_DOT,
      SYMBOL_DOT,
      SYMBOL_COMMA,
      SYMBOL_COLON_COLON,
      SYMBOL_COLON,
      SYMBOL_SEMICOLON,
      SYMBOL_LESS_THAN_LESS_THAN,
      SYMBOL_LESS_THAN,
      SYMBOL_GREATER_THAN_GREATER_THAN,
      SYMBOL_GREATER_THAN,

      ENUM_END, // Used for iterating this enum
    };
  }
}
